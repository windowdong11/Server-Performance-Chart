[{"/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/index.tsx":"1","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/reportWebVitals.ts":"2","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/App.tsx":"3","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/pages/GraphServer.tsx":"4","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/Chart.tsx":"5","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/RequestOptions.tsx":"6","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/action/fetch.ts":"7","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/InputRightDesc.tsx":"8","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/OptionButton.tsx":"9","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/hooks/usePrev.ts":"10"},{"size":507,"mtime":1609665022351,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1609567348381,"results":"13","hashOfConfig":"12"},{"size":258,"mtime":1609661740030,"results":"14","hashOfConfig":"12"},{"size":6292,"mtime":1610207478921,"results":"15","hashOfConfig":"12"},{"size":2039,"mtime":1610247982489,"results":"16","hashOfConfig":"12"},{"size":1242,"mtime":1609778105634,"results":"17","hashOfConfig":"12"},{"size":965,"mtime":1610102878846,"results":"18","hashOfConfig":"12"},{"size":694,"mtime":1610185369969,"results":"19","hashOfConfig":"12"},{"size":962,"mtime":1609671486720,"results":"20","hashOfConfig":"12"},{"size":210,"mtime":1610204209792,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"kupawc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/index.tsx",[],["47","48"],"/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/reportWebVitals.ts",[],"/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/App.tsx",[],"/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/pages/GraphServer.tsx",["49","50","51","52","53","54"],"import React from 'react'\nimport { useState } from 'react'\nimport { Button, Col, Container, Form, InputGroup, Row } from 'react-bootstrap'\nimport { Endpoints, fetchAPI, HttpMethod, MiddleServerData } from '../action/fetch'\nimport Chart from '../components/Chart'\nimport InputRightDesc from '../components/InputRightDesc'\nimport RangeInput from 'react-bootstrap-range-slider'\n\nimport OptionButton from '../components/OptionButton'\nimport RequestOptions from '../components/RequestOptions'\nimport { ChartData, ChartProps, GraphData } from '../types/chart'\nimport { parse } from 'path'\n\n/*\ninput\n    request count\n    client count\n    request Server\n    request type\noutput\n    response time\n*/\n/*\n1. 간격설정(input)\n2. 라벨값 설정(function)\n3. 데이터 정제(라벨에 맞게 설정)\n\n데이터 정제과정\n1. 레이턴시 추출\n2. 모든 레이턴시에 대해 \"각 라벨의 범위에 맞게 라벨별로 레이턴시 수\" 정제\n */\nlet testData: ChartData = {\n    labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'],\n    datasets: [\n        {\n            label: 'GQL',\n            data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            fill: true,\n            backgroundColor: 'rgba(255, 99, 133, 0.144)',\n            borderColor: 'rgba(255, 99, 132, 0.2)',\n        },\n        {\n            label: 'Rest',\n            data: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n            fill: true,\n            backgroundColor: 'rgba(117, 255, 99, 0.151)',\n            borderColor: 'rgba(99, 255, 125, 0.2)',\n        },\n        {\n            label: 'ProtoBuf',\n            data: [2, 4, 4, 1, 3, 5, 6, 7, 8, 4],\n            fill: true,\n            backgroundColor: 'rgba(185, 99, 255, 0.151)',\n            borderColor: 'rgba(180, 99, 255, 0.2)',\n        },\n    ],\n}\n\ninterface queryResult {\n    id: number\n    startTime?: number\n    endTime?: number\n    elaspedTime?: number\n    requestState: RequestState\n}\n\nenum RequestState {\n    loading = 'loading',\n    end = 'end',\n}\n\nconst GraphServer = () => {\n    // input 입력용\n    const [clientCnt, setClientCnt] = useState('2')\n    const [duration, setDuration] = useState('2')\n    const [arrivalRate, setArrivalRate] = useState('2')\n    const [queryId, setQueryId] = useState('1')\n    const [gap, setGap] = useState(100000)\n\n    // chart용\n    const [chartJsons, setChartJsons] = useState<Artillery[]>([])\n    const [chartData, setChartData] = useState<ChartData>(testData)\n\n    // 서버 선택 버튼\n    const [selectedServer, setSelectedServer] = useState('2')\n    const serverOptions = [\n        { name: 'GraphQL', value: '0', midUrl: Endpoints.MiddleServer + '/gql', originUrl: Endpoints.GraphQL },\n        { name: 'ProtoBuf', value: '1', midUrl: Endpoints.MiddleServer + '/protobuf', originUrl: Endpoints.ProtoBuf },\n        { name: 'RestAPI', value: '2', midUrl: Endpoints.MiddleServer + '/rest', originUrl: Endpoints.RestAPI },\n    ]\n\n    // 쿼리옵션 선택 버튼\n    const [selectedQuery, setSelectedQuery] = useState('1')\n    const queryOptions = [\n        { name: 'All', value: '0' },\n        { name: 'ById', value: '1' },\n    ]\n\n    // 테스트 버튼\n    const onTest = () => {\n        const optionIdx = parseInt(selectedServer)\n        const detailUrl = `/${selectedQuery === '0' ? 'all' : queryId}`\n        const midServerAddress = serverOptions[optionIdx].midUrl + detailUrl\n        const requestData: MiddleServerData = {\n            address: serverOptions[optionIdx].originUrl + detailUrl,\n            arrivalRate: arrivalRate,\n            clientCount: clientCnt,\n            duration: duration,\n        }\n        fetchAPI<Artillery>(midServerAddress, requestData, HttpMethod.Post)\n            .then((json) => {\n                setChartJsons([...chartJsons, json])\n                console.log(\"done\")\n            })\n            .catch(error => {\n                console.log('response error while requesting to midServer in [Performance\" page, \"test\" button]')\n                console.log(error)\n            })\n    }\n\n    return (\n        <Container>\n            <Row>\n                <h1>Performance</h1>\n            </Row>\n            <Row xl={{ cols: 2 }} lg={{ cols: 1 }}>\n                <Col xl={{ span: 9 }}>\n                    <Chart jsons={chartJsons} gap={gap}/>\n                </Col>\n                <Col xl={{ span: 3 }} lg={{ span: 5 }} md={{ span: 5 }} sm={{ span: 5 }}>\n                    <Row>\n                    <Col xl={4}>\n                        <InputGroup className=\"mb-3\" size=\"sm\">\n                            <Form.Control\n                                value={gap}\n                                onChange={e => setGap(Math.min(10000000, Math.max(10000, parseInt(e.target.value))))}\n                                />\n                        </InputGroup>\n                    </Col>\n                    <Col xl={8} >\n                        <RangeInput min={10000} max={10000000} step={10000} value={gap} onChange={(_, value) => setGap(value)} />\n                    </Col>\n                    </Row>\n                    <RequestOptions clientCnt={clientCnt} clientCntOnChange={(e) => { setClientCnt(e.target.value) }}\n                        duration={duration} durationOnChange={(e) => { setDuration(e.target.value) }}\n                        arrivalRate={arrivalRate} arrivalRateOnChange={(e) => { setArrivalRate(e.target.value) }}>\n                        <>\n                            <OptionButton options={serverOptions} selectedValue={selectedServer}\n                                onChange={(e) => { setSelectedServer(e.target.value) }}></OptionButton>\n                            <OptionButton options={queryOptions} selectedValue={selectedQuery}\n                                onChange={(e) => { setSelectedQuery(e.target.value) }}></OptionButton>\n                            {selectedQuery !== '0' &&\n                                <InputRightDesc value={queryId} onChange={e => setQueryId(e.target.value)} description=\"ID\" />\n                            }\n                        </>\n                    </RequestOptions>\n                    <Button variant=\"dark\" block onClick={onTest}>Test</Button>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            {gap}\n        </Container>\n    )\n}\n\nexport default GraphServer","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/Chart.tsx",["55","56","57","58"],"/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/RequestOptions.tsx",["59","60","61","62","63","64","65","66"],"import React, { ReactChild } from \"react\"\nimport { Button, Col, Container, Row, RowProps } from \"react-bootstrap\"\nimport { inputChange, buttonChange } from \"../types/events\"\nimport InputRightDesc from \"./InputRightDesc\"\nimport OptionButton from \"./OptionButton\"\n\ninterface RequestOptionsProps {\n    children?: ReactChild,\n    clientCnt: string,\n    clientCntOnChange: React.ChangeEventHandler<HTMLInputElement>,\n    duration: string,\n    durationOnChange: React.ChangeEventHandler<HTMLInputElement>,\n    arrivalRate: string,\n    arrivalRateOnChange: React.ChangeEventHandler<HTMLInputElement>,\n    /*\n    address: string\n    duration: number\n    arrivalRate: number\n    clientCount: number\n     */\n}\n\nexport default function RequestOptions({children, clientCnt, clientCntOnChange, duration, durationOnChange, arrivalRate, arrivalRateOnChange }: RequestOptionsProps) {\n    return (\n        <>\n            <InputRightDesc description=\"clients\" onChange={clientCntOnChange} value={clientCnt} />\n            <InputRightDesc description=\"duration\" onChange={durationOnChange} value={duration} />\n            <InputRightDesc description=\"arrival rate\" onChange={arrivalRateOnChange} value={arrivalRate} />\n            {children}\n        </>\n    )\n}","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/action/fetch.ts",["67"],"import { Url } from \"url\"\n\nexport const Endpoints  = {\n    GraphQL : `http://localhost:${process.env.REACT_APP_GQL_PORT}/graphql`,\n    ProtoBuf : `http://localhost:${process.env.REACT_APP_PROTO_PORT}/post`,\n    RestAPI : `http://localhost:${process.env.REACT_APP_REST_PORT}/post`,\n    MiddleServer : `http://localhost:${process.env.REACT_APP_MIDDLE_SERVER_PORT}`,\n}\n\nexport enum HttpMethod {\n    Post = \"POST\",\n    Get = \"GET\",\n}\n\nexport interface MiddleServerData {\n    address: string,\n    duration: number | string,\n    arrivalRate: number | string,\n    clientCount: number | string,\n}\n\nfunction fetchAPI<T>(endpoint: string, query : string | MiddleServerData, method: HttpMethod) : Promise<T>{\n    return fetch(endpoint, {\n        method: method,\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(query)\n    })\n    .then((res) => {\n        return res.json() as Promise<T>\n    }\n    )\n}\n\nexport {fetchAPI}","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/InputRightDesc.tsx",[],"/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/components/OptionButton.tsx",["68","69"],"import { useState } from \"react\";\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap'\nimport { onChangeFunc } from \"../types/eventHandler\";\n\n\ninterface OptionButtonProps {\n    options: {name: string, value: string}[]\n    selectedValue: string  \n    onChange: React.ChangeEventHandler<HTMLInputElement>\n}\n\n\nexport default function OptionButton({ options, selectedValue, onChange } : OptionButtonProps) {\n\n    return (\n        <ButtonGroup toggle className=\"optionbutton\">\n            {options.map((option, idx) => (\n                <ToggleButton\n                    key={idx}\n                    type=\"radio\"\n                    variant=\"secondary\"\n                    name=\"radio\"\n                    value={option.value}\n                    checked={selectedValue === option.value}\n                    onChange={onChange}\n                >\n                    {option.name}\n                </ToggleButton>\n            ))}\n        </ButtonGroup>\n    );\n}","/Users/wondong-gyu/Desktop/webproject/Server-Performance-Chart-client/src/hooks/usePrev.ts",["70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":11,"column":21,"nodeType":"77","messageId":"78","endLine":11,"endColumn":31},{"ruleId":"75","severity":1,"message":"79","line":11,"column":33,"nodeType":"77","messageId":"78","endLine":11,"endColumn":42},{"ruleId":"75","severity":1,"message":"80","line":12,"column":10,"nodeType":"77","messageId":"78","endLine":12,"endColumn":15},{"ruleId":"75","severity":1,"message":"81","line":59,"column":11,"nodeType":"77","messageId":"78","endLine":59,"endColumn":22},{"ruleId":"75","severity":1,"message":"82","line":82,"column":12,"nodeType":"77","messageId":"78","endLine":82,"endColumn":21},{"ruleId":"75","severity":1,"message":"83","line":82,"column":23,"nodeType":"77","messageId":"78","endLine":82,"endColumn":35},{"ruleId":"75","severity":1,"message":"84","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":26},{"ruleId":"75","severity":1,"message":"85","line":1,"column":28,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"75","severity":1,"message":"86","line":4,"column":8,"nodeType":"77","messageId":"78","endLine":4,"endColumn":15},{"ruleId":"87","severity":1,"message":"88","line":28,"column":24,"nodeType":"89","messageId":"90","endLine":28,"endColumn":87,"fix":"91"},{"ruleId":"75","severity":1,"message":"92","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":16},{"ruleId":"75","severity":1,"message":"93","line":2,"column":18,"nodeType":"77","messageId":"78","endLine":2,"endColumn":21},{"ruleId":"75","severity":1,"message":"94","line":2,"column":23,"nodeType":"77","messageId":"78","endLine":2,"endColumn":32},{"ruleId":"75","severity":1,"message":"95","line":2,"column":34,"nodeType":"77","messageId":"78","endLine":2,"endColumn":37},{"ruleId":"75","severity":1,"message":"96","line":2,"column":39,"nodeType":"77","messageId":"78","endLine":2,"endColumn":47},{"ruleId":"75","severity":1,"message":"97","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":21},{"ruleId":"75","severity":1,"message":"98","line":3,"column":23,"nodeType":"77","messageId":"78","endLine":3,"endColumn":35},{"ruleId":"75","severity":1,"message":"99","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":20},{"ruleId":"75","severity":1,"message":"100","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":13},{"ruleId":"75","severity":1,"message":"85","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":18},{"ruleId":"75","severity":1,"message":"101","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":22},{"ruleId":"75","severity":1,"message":"102","line":1,"column":8,"nodeType":"77","messageId":"78","endLine":1,"endColumn":13},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'ChartProps' is defined but never used.","Identifier","unusedVar","'GraphData' is defined but never used.","'parse' is defined but never used.","'queryResult' is defined but never used.","'chartData' is assigned a value but never used.","'setChartData' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'usePrev' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","CallExpression","useLiteral",{"range":"105","text":"106"},"'Button' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'RowProps' is defined but never used.","'inputChange' is defined but never used.","'buttonChange' is defined but never used.","'OptionButton' is defined but never used.","'Url' is defined but never used.","'onChangeFunc' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",[834,897],"[0, ...labels.map((value) => Math.floor(value + gap / 2))]"]